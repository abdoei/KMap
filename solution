#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <set>
#define ll long long
#define ld long double
#define sz(s) s.size()
#define all(v) v.begin(), v.end()
#define allr(v) v.rbegin(), v.rend()
#define fast std::ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);
#define file freopen("bad-memes.in", "r", stdin);
#define endl '\n'
#define T int t;cin >> t;while (t--)
#define OO INT_MAX
#define O INT_MIN
#define fx(x) fixed << setprecision(x)
#define mod 1000000007
#define fix(a, k) (a % k + k) % k
#define vi vector<int>
#define vii vector<vector<int>>
#define vb vector<bool>
#define vbb vector<vector<bool>>
#define vl vector<long long>
#define vll vector<vector<long long>>
#define vc vector<char>
#define vcc vector<vector<char>>
#define vp vector<pair<int, int>>
#define vpp vector<vector<pair<int, int>>>
#define vs vector<string>
#define PI 3.14159265359
#define pb push_back
#define maxInputLetters 100
#define maxInputTerms 16
using namespace std;
int n, m;
inline bool valid(int i, int j)
{
    return i >= 0 && j >= 0 && i < n && j < m;
}
int dx[] = {0, 0, 1, -1, 1, -1, 1, -1};
int dy[] = {1, -1, 0, 0, 1, -1, -1, 1};
int graycode[5][5] =
{
    {0, 0, 0, 0, 0},
    {0, 0, 1, 3, 2},
    {0, 4, 5, 7, 6},
    {0, 12, 13, 15, 14},
    {0, 8, 9, 11, 10}
};
string name = "ABCD";
string getgraycode(vi v)
{
    bitset<4> x(v[0]);
    vb flag(4, 1);
    for (int i = 1; i < sz(v); i++)
    {
        bitset<4> s(v[i]);
        for (int j = 0; j < 4; j++)
        {
            if (s[j] != x[j])
                flag[j] = 0;
        }
    }
    string str;
    for (int i = 0; i < 4; i++)
    {
        if (flag[i])
        {
            if (!x[i])
                str += '`';
            str += name[3 - i];
        }
    }
    reverse(all(str));
    return str;
}
int main()
{
    ios_base::sync_with_stdio(false);
    // cout.tie(NULL);
    // cin.tie(NULL);
    cout << "Your literals are A, B, C and D capital or small letters (you can mix in between) in addition to these letters you only can enter the plus sign \"+\" and the apostrophe sign to negate the literal (e.g., A' or b') \n";
    int flag = 0; // General Purpose flag
    char arr[maxInputLetters] = "", terms[maxInputTerms][8] = {};
    cin >> arr;

    // divide into terms
    int lastTermIndex = 0;
    for (int i = 0; arr[i] != '\0'; i++, lastTermIndex++)
    {
        for (int j = 0; !(arr[i] == '+' || arr[i] == '\0'); j++)
        {
            terms[lastTermIndex][j] = arr[i];
            i++; // bypass the + sign
            /*if ((arr[i] != '+' || arr[i] != '\'' || arr[i] != 'a' || arr[i] != 'b' || arr[i] != 'c' || arr[i] != 'd' || arr[i] != 'A' || arr[i] != 'B' || arr[i] != 'C' || arr[i] != 'D'))
            {
                cout << "Wrong input" << endl;
                return -1;
            }*/
        }
    }

    // calc the num of the lit of each term
    int numOfLiterals[maxInputTerms] = {0};
    for (int i = 0; i < lastTermIndex; i++)
    {
        flag = 0;
        for (int j = 0; terms[i][j] != '\0'; j++)
        {
            if (terms[i][j] != '\'')
                flag++;
        }
        numOfLiterals[i] = flag;
    }

    // calc the binary of each term
    // initiate the termsBinaryValue array with -1 to be like {{-1, -1, -1, -1},...}
    int termsBinaryValue[maxInputTerms][4];
    for (int i = 0; i < maxInputTerms; i++)
    {
        for (int j = 0; j < 4; j++)
            termsBinaryValue[i][j] = -1;
    }

    // convert to binary
    for (int i = 0; i < lastTermIndex + 1; i++)
    {
        for (int j = 0; j < 2 * numOfLiterals[i]; j++) // maximum iteration is applied when all lit are negated
        {
            if ((terms[i][j] == 'a' || terms[i][j] == 'A') && terms[i][j + 1] != '\'')
                termsBinaryValue[i][0] = 1;
            else if ((terms[i][j] == 'a' || terms[i][j] == 'A') && terms[i][j + 1] == '\'')
            {
                termsBinaryValue[i][0] = 0;
                j++;
            }
            else if ((terms[i][j] == 'b' || terms[i][j] == 'B') && terms[i][j + 1] != '\'')
                termsBinaryValue[i][1] = 1;
            else if ((terms[i][j] == 'b' || terms[i][j] == 'B') && terms[i][j + 1] == '\'')
            {
                termsBinaryValue[i][1] = 0;
                j++;
            }
            else if ((terms[i][j] == 'c' || terms[i][j] == 'C') && terms[i][j + 1] != '\'')
                termsBinaryValue[i][2] = 1;
            else if ((terms[i][j] == 'c' || terms[i][j] == 'C') && terms[i][j + 1] == '\'')
            {
                termsBinaryValue[i][2] = 0;
                j++;
            }
            else if ((terms[i][j] == 'd' || terms[i][j] == 'D') && terms[i][j + 1] != '\'')
                termsBinaryValue[i][3] = 1;
            else if ((terms[i][j] == 'd' || terms[i][j] == 'D') && terms[i][j + 1] == '\'')
            {
                termsBinaryValue[i][3] = 0;
                j++;
            }
        }
    }

    // Generate values from terms
    int permutations[8][3] = {{0, 0, 0},
        {1, 0, 0},
        {0, 1, 0},
        {1, 1, 0},
        {0, 0, 1},
        {1, 0, 1},
        {0, 1, 1},
        {1, 1, 1}
    };
    int finalValues[16] = {};

    // looping through the entered terms to ...
    for (int i = 0; i < lastTermIndex; i++)
    {
        flag = 0;
        int weights[4] = {8, 4, 2, 1};

        // modify the masking weights
        for (int k = 0; k < 4; k++)
        {
            if (termsBinaryValue[i][k] == 1)
            {
                flag += termsBinaryValue[i][k] * weights[k]; // store the sum of the constant literal weights
                weights[k] = 0;                              // then eleminate the corresponding weight not to calculate it multiple times
            }
            else if (termsBinaryValue[i][k] == 0)
                weights[k] = 0;
        }

        // Looping through the absent literals permutations
        for (int j = 0; j < pow(2, 4 - numOfLiterals[i]); j++)
        {
            int temp = 0;             // store the sum of the variable literals for each different permutation
            int lastUnknownIndex = 0; // index to focus on from where to get the next value of the permutation (the permutations were rearranged to be valid for different cases (i.e., one absent literal, two or three))
            for (int l = 0; l < 4; l++)
            {
                if (termsBinaryValue[i][l] == -1)
                {
                    temp -= termsBinaryValue[i][l] * weights[l] * permutations[j][lastUnknownIndex];
                    lastUnknownIndex++;
                }
            }
            finalValues[flag + temp] = 1;
        }
    }
    int n=4;
    // rearrange the terms in the kMap
    vii v(n + 5, vi(n + 5)), prefix(n + 5, vi(n + 5, 0));
    vbb vis(n + 5, vb(n + 5, 0));
    vi cells;
    multiset<string> st;
    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
        {
            v[i][j] = finalValues[graycode[i][j]];
        }
    }
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + v[i][j];
    if (prefix[n][n] == 16)
        cout << 1 << endl; //search for 16 cells block
    else
    {
        for(int k=2; k<=n; k++)
        {
            if(prefix[4][k]-prefix[4][k-2]==8)
            {
                for (int i = 1; i <= n; i++)
                {
                    for (int j = k-1; j <= k; j++)
                    {
                        vis[i][j] = 1;
                        cells.pb(graycode[i][j]);
                    }
                }
                st.insert(getgraycode(cells));
                cells.clear();
            }
        }
        for(int k=2; k<=n; k++)
        {
            if(prefix[k][4]-prefix[k-2][4]==8)
            {
                for (int i = k-1; i <= k; i++)
                {
                    for (int j = 1; j <= n; j++)
                    {
                        vis[i][j] = 1;
                        cells.pb(graycode[i][j]);
                    }
                }
                st.insert(getgraycode(cells));
                cells.clear();
            }
        }
        if (prefix[4][4] - prefix[3][4] + prefix[1][4] == 8)
        {
            for (int i = 1; i <= n; i += 3)
            {
                for (int j = 1; j <= n; j++)
                {
                    vis[i][j] = 1;
                    cells.pb(graycode[i][j]);
                }
            }
            st.insert(getgraycode(cells));
            cells.clear();
        }
        if (prefix[4][4] - prefix[4][3] + prefix[4][1] == 8)
        {
            for (int i = 1; i <= n; i++)
            {
                for (int j = 1; j <= n; j += 3)
                {
                    vis[i][j] = 1;
                    cells.pb(graycode[i][j]);
                }
            }
            st.insert(getgraycode(cells));
            cells.clear();
        }
        //search for 4 cells block
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                if (v[i][j] && !vis[i][j])
                {
                    int cnt = 0;
                    bool down = 0, up = 0, right = 0, left = 0;
                    for (int k = 0; k < n; k++)
                    {
                        int x = i + dx[k] + n, y = j + dy[k] + n;
                        while (x > n)
                            x -= n;
                        while (y > n)
                            y -= n;
                        if (v[x][y] == 1)
                        {
                            cnt++;
                            if (!k)
                                right=1;
                            else if (k == 1)
                                left=1;
                            else if (k == 2)
                                down=1;
                            else
                                up=1;
                        }
                    }
                    if (cnt == 2)
                    {
                        if (down && up && prefix[4][j] - prefix[4][j - 1] == 4)
                        {
                            for (int x = 1; x <= n; x++)
                            {
                                vis[x][j] = 1;
                                cells.pb(graycode[x][j]);
                            }
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (right && left && prefix[i][4] - prefix[i - 1][4] == 4)
                        {
                            for (int y = 1; y <= n; y++)
                            {
                                vis[i][y] = 1;
                                cells.pb(graycode[i][y]);
                            }
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (down && left)
                        {
                            if (i == n)
                            {
                                if (j == 1)
                                {
                                    if (v[1][n])
                                    {
                                        vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                        cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                                else
                                {
                                    if (v[1][j - 1])
                                    {
                                        vis[1][j] = vis[1][j - 1] = vis[i][j] = vis[i][j - 1] = 1;
                                        cells.pb(graycode[i][j]), cells.pb(graycode[1][j]), cells.pb(graycode[1][j - 1]), cells.pb(graycode[i][j - 1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                            }
                            else if (j == 1)
                            {
                                if (v[i + 1][n])
                                {
                                    vis[i][j] = vis[i][n] = vis[i + 1][j] = vis[i + 1][n] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][n]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][n]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[i + 1][j - 1])
                                {
                                    vis[i][j] = vis[i][j - 1] = vis[i + 1][j] = vis[i + 1][j - 1] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][j - 1]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][j - 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                        else if (down && right)
                        {
                            if (i == n)
                            {
                                if (j == n)
                                {
                                    if (v[1][1])
                                    {
                                        vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                        cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                                else
                                {
                                    if (v[1][j + 1])
                                    {
                                        vis[1][j] = vis[1][j + 1] = vis[i][j] = vis[i][j + 1] = 1;
                                        cells.pb(graycode[1][j]), cells.pb(graycode[1][j + 1]), cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                            }
                            else if (j == n)
                            {
                                if (v[i + 1][1])
                                {
                                    vis[i][j] = vis[i][1] = vis[i + 1][j] = vis[i + 1][1] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][1]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[i + 1][j + 1])
                                {
                                    vis[i][j] = vis[i][j + 1] = vis[i + 1][j] = vis[i + 1][j + 1] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][j + 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                        else if (up && right)
                        {
                            if (i == 1)
                            {
                                if (j == n)
                                {
                                    if (v[n][1])
                                    {
                                        vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                        cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                                else
                                {
                                    if (v[n][j + 1])
                                    {
                                        vis[n][j] = vis[n][j + 1] = vis[i][j] = vis[i][j + 1] = 1;
                                        cells.pb(graycode[n][j]), cells.pb(graycode[n][j + 1]), cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                            }
                            else if (j == n)
                            {
                                if (v[i - 1][1])
                                {
                                    vis[i][j] = vis[i][1] = vis[i - 1][j] = vis[i - 1][1] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][1]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[i - 1][j + 1])
                                {
                                    vis[i][j] = vis[i][j + 1] = vis[i - 1][j] = vis[i - 1][j + 1] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][j + 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                        else if (up && left)
                        {
                            if (i == 1)
                            {
                                if (j == 1)
                                {
                                    if (v[n][n])
                                    {
                                        vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                        cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                                else
                                {
                                    if (v[n][j - 1])
                                    {
                                        vis[n][j] = vis[n][j - 1] = vis[i][j] = vis[i][j - 1] = 1;
                                        cells.pb(graycode[n][j]), cells.pb(graycode[n][j - 1]), cells.pb(graycode[i][j]), cells.pb(graycode[i][j - 1]);
                                        st.insert(getgraycode(cells));
                                        cells.clear();
                                    }
                                }
                            }
                            else if (j == 1)
                            {
                                if (v[i - 1][n])
                                {
                                    vis[i][j] = vis[i][n] = vis[i - 1][j] = vis[i - 1][n] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][n]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][n]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[i - 1][j - 1])
                                {
                                    vis[i][j] = vis[i][j - 1] = vis[i - 1][j] = vis[i - 1][j - 1] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[i][j - 1]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][j - 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                    }
                }
            }
        }
        //searching for two cells
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                if (v[i][j] && !vis[i][j])
                {
                    bool down = 0, up = 0, right = 0, left = 0, flagdown = 0, flagup = 0, flagright = 0, flagleft = 0;
                    for (int k = 0; k < n; k++)
                    {
                        int x = i + dx[k] + n, y = j + dy[k] + n;
                        while (x > n)
                            x -= n;
                        while (y > n)
                            y -= n;
                        if (v[x][y])
                        {
                            if (!k)
                            {
                                right=1;
                                if (!vis[x][y])
                                    flagright = 1;
                            }
                            else if (k == 1)
                            {
                                left=1;
                                if (!vis[x][y])
                                    flagleft = 1;
                            }
                            else if (k == 2)
                            {
                                down=1;
                                if (!vis[x][y])
                                    flagdown = 1;
                            }
                            else
                            {
                                up=1;
                                if (!vis[x][y])
                                    flagup = 1;
                            }
                        }
                    }



                    if (up&&down && prefix[4][j] - prefix[4][j - 1] == 4)
                    {
                        for (int x = 1; x <= n; x++)
                        {
                            vis[x][j] = 1;
                            cells.pb(graycode[x][j]);
                        }
                        st.insert(getgraycode(cells));
                        cells.clear();
                    }
                    else if (right && left && prefix[i][4] - prefix[i - 1][4] == 4)
                    {
                        for (int y = 1; y <= n; y++)
                        {
                            vis[i][y] = 1;
                            cells.pb(graycode[i][y]);
                        }
                        st.insert(getgraycode(cells));
                        cells.clear();
                    }
                    else if (down && left)
                    {
                        if (i == n)
                        {
                            if (j == 1)
                            {
                                if (v[1][n])
                                {
                                    vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                    cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[1][j - 1])
                                {
                                    vis[1][j] = vis[1][j - 1] = vis[i][j] = vis[i][j - 1] = 1;
                                    cells.pb(graycode[i][j]), cells.pb(graycode[1][j]), cells.pb(graycode[1][j - 1]), cells.pb(graycode[i][j - 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                        else if (j == 1)
                        {
                            if (v[i + 1][n])
                            {
                                vis[i][j] = vis[i][n] = vis[i + 1][j] = vis[i + 1][n] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][n]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][n]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                        else
                        {
                            if (v[i + 1][j - 1])
                            {
                                vis[i][j] = vis[i][j - 1] = vis[i + 1][j] = vis[i + 1][j - 1] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][j - 1]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][j - 1]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                    }
                    else if (down && right)
                    {
                        if (i == n)
                        {
                            if (j == n)
                            {
                                if (v[1][1])
                                {
                                    vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                    cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[1][j + 1])
                                {
                                    vis[1][j] = vis[1][j + 1] = vis[i][j] = vis[i][j + 1] = 1;
                                    cells.pb(graycode[1][j]), cells.pb(graycode[1][j + 1]), cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                        else if (j == n)
                        {
                            if (v[i + 1][1])
                            {
                                vis[i][j] = vis[i][1] = vis[i + 1][j] = vis[i + 1][1] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][1]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][1]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                        else
                        {
                            if (v[i + 1][j + 1])
                            {
                                vis[i][j] = vis[i][j + 1] = vis[i + 1][j] = vis[i + 1][j + 1] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]), cells.pb(graycode[i + 1][j]), cells.pb(graycode[i + 1][j + 1]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                    }
                    else if (up && right)
                    {
                        if (i == 1)
                        {
                            if (j == n)
                            {
                                if (v[n][1])
                                {
                                    vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                    cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[n][j + 1])
                                {
                                    vis[n][j] = vis[n][j + 1] = vis[i][j] = vis[i][j + 1] = 1;
                                    cells.pb(graycode[n][j]), cells.pb(graycode[n][j + 1]), cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                        else if (j == n)
                        {
                            if (v[i - 1][1])
                            {
                                vis[i][j] = vis[i][1] = vis[i - 1][j] = vis[i - 1][1] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][1]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][1]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                        else
                        {
                            if (v[i - 1][j + 1])
                            {
                                vis[i][j] = vis[i][j + 1] = vis[i - 1][j] = vis[i - 1][j + 1] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][j + 1]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][j + 1]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                    }
                    else if (up && left)
                    {
                        if (i == 1)
                        {
                            if (j == 1)
                            {
                                if (v[n][n])
                                {
                                    vis[n][n] = vis[n][1] = vis[1][n] = vis[1][1] = 1;
                                    cells.pb(graycode[n][n]), cells.pb(graycode[n][1]), cells.pb(graycode[1][n]), cells.pb(graycode[1][1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                            else
                            {
                                if (v[n][j - 1])
                                {
                                    vis[n][j] = vis[n][j - 1] = vis[i][j] = vis[i][j - 1] = 1;
                                    cells.pb(graycode[n][j]), cells.pb(graycode[n][j - 1]), cells.pb(graycode[i][j]), cells.pb(graycode[i][j - 1]);
                                    st.insert(getgraycode(cells));
                                    cells.clear();
                                }
                            }
                        }
                        else if (j == 1)
                        {
                            if (v[i - 1][n])
                            {
                                vis[i][j] = vis[i][n] = vis[i - 1][j] = vis[i - 1][n] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][n]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][n]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                        else
                        {
                            if (v[i - 1][j - 1])
                            {
                                vis[i][j] = vis[i][j - 1] = vis[i - 1][j] = vis[i - 1][j - 1] = 1;
                                cells.pb(graycode[i][j]), cells.pb(graycode[i][j - 1]), cells.pb(graycode[i - 1][j]), cells.pb(graycode[i - 1][j - 1]);
                                st.insert(getgraycode(cells));
                                cells.clear();
                            }
                        }
                    }
                    if(!vis[i][j])
                    {
                        cells.pb(graycode[i][j]);

                        if (flagup)
                        {
                            if (i != 1)
                                vis[i][j] = vis[i - 1][j] = 1, cells.pb(graycode[i - 1][j]);
                            else
                                vis[i][j] = vis[n][j] = 1, cells.pb(graycode[n][j]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (flagright)
                        {
                            if (j != n)
                                vis[i][j] = vis[i][j + 1] = 1, cells.pb(graycode[i][j + 1]);
                            else
                                vis[i][j] = vis[i][1] = 1, cells.pb(graycode[i][1]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (flagdown)
                        {
                            if (i != n)
                                vis[i][j] = vis[i + 1][j] = 1, cells.pb(graycode[i + 1][j]);
                            else
                                vis[i][j] = vis[1][j] = 1, cells.pb(graycode[1][j]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (flagleft)
                        {
                            if (j != 1)
                                vis[i][j] = vis[i][j - 1] = 1, cells.pb(graycode[i][j - 1]);
                            else
                                vis[i][j] = vis[i][n] = 1, cells.pb(graycode[i][n]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (up)
                        {
                            if (i != 1)
                                vis[i][j] = vis[i - 1][j] = 1, cells.pb(graycode[i - 1][j]);
                            else
                                vis[i][j] = vis[n][j] = 1, cells.pb(graycode[n][j]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (right)
                        {
                            if (j != n)
                                vis[i][j] = vis[i][j + 1] = 1, cells.pb(graycode[i][j + 1]);
                            else
                                vis[i][j] = vis[i][1] = 1, cells.pb(graycode[i][1]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (down)
                        {
                            if (i != n)
                                vis[i][j] = vis[i + 1][j] = 1, cells.pb(graycode[i + 1][j]);
                            else
                                vis[i][j] = vis[1][j] = 1, cells.pb(graycode[1][j]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                        else if (left)
                        {
                            if (j != 1)
                                vis[i][j] = vis[i][j - 1] = 1, cells.pb(graycode[i][j - 1]);
                            else
                                vis[i][j] = vis[i][n] = 1, cells.pb(graycode[i][n]);
                            st.insert(getgraycode(cells));
                            cells.clear();
                        }
                    }
                }
            }
        }
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                if (v[i][j] && !vis[i][j])
                {
                    vis[i][j] = 1;
                    cells.pb(graycode[i][j]);
                    st.insert(getgraycode(cells));
                    cells.clear();
                }
            }
        }
    }
    int i=0;
    for (auto it : st)
    {
        cout<<it;
        if(++i!=sz(st))cout<<"+";
    }
    return 0;
}
